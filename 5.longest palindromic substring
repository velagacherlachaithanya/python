class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        if not s:
            return ""
        
        start, end = 0, 0

        def expand_from_center(left, right):
            while left >= 0 and right < len(s) and s[left] == s[right]:
                left -= 1
                right += 1
            # Return length of palindrome and new boundaries
            return right - left - 1, left + 1, right - 1

        for i in range(len(s)):
            # Odd-length palindrome (center at one char)
            len1, l1, r1 = expand_from_center(i, i)
            # Even-length palindrome (center between two chars)
            len2, l2, r2 = expand_from_center(i, i + 1)

            # Choose the longer palindrome
            if len1 > end - start:
                start, end = l1, r1
            if len2 > end - start:
                start, end = l2, r2

        return s[start:end + 1]
