class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        char_index = {}  # stores last seen index of each character
        left = 0         # left boundary of the sliding window
        max_len = 0

        for right in range(len(s)):
            if s[right] in char_index and char_index[s[right]] >= left:
                # Move the left boundary past the previous duplicate
                left = char_index[s[right]] + 1

            # Update the last seen index of the current character
            char_index[s[right]] = right

            # Update max length
            max_len = max(max_len, right - left + 1)

        return max_len
